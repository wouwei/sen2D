FUNCTIONS . 


1.CANVAS 
1.1 METHODS 
$.canvas.setting(height,width,color);
height = height of the canvas 
width = width of the canvas 
color = hexa , color of the background , optional .

by default if not defined : $.canvas.setting(200,100,"#FFFFFF");


1.2. OBJECT
$.canvas.ctx = canvas 2D context .

$.canvas.bkg = defining the background parameters ( in fact the background is a rectangle filling the whole canvas ) . 
$.canvas.bkg.width = with of the canvas 
$.canvas.bkg.height = height of the canvas 
$.canvas.bkg.color = color of the background . 

1.3 FPS
no setters for FPS is yet implemented , but you can change it directly in render.js line 10.

2. ASSETS .
2.1 TEXTURES 
2.1.1 METHODS 
$.assets.newTexture("name","url");
name = name we want to give to the texture 
url = url of the image we want to use as a texture 

eg : $.assets.newTexture('grey','assets/circle_grey.png');



2.1.2 OBJECT
$.asset.texture will stock the textures as an object form .
taking the former example with the grey texture :
 
$.assets.texture.grey = '<img src="assets/circle_grey.png">'
$.assets.texture.green = '<img src="assets/circle_green.png">'



2.2 GRAPHICS.
2.2.1 IMAGES 
2.2.1.1 METHODS 
$.assets.newImage(name,texture,x,y,width,height,scale)
*mandatory*
name = name of your object/image
texture = texture you want to use , defined before ( eg grey ) 
*optional*
(x,y) = position on the canvas , by default (0,0)
(width , height ) = size of the image , by default this will be the size of the texture
scale = scaling the image . 1 is 100% of the texture size ( by default) , 0.5 is 50% , 1.5 will be 150%, etc ... 

eg : 	$.assets.newImage('myImage','grey'); // myIMage will be positionned to (x,y) = (0,0) and the size will be the the texture grey'one (width,height) = (150,150)
OR 		$.assets.newImage('myImage','grey',150,20); // myImage will be positionned to (x,y) = (150,20) and the size will be the the texture grey'one (width,height) = (150,150)
OR		$.assets.newImage('myImage','grey',150,20,200,2); // myImage will be skewed and will have a size (width,height) of (200,2) 
OR		$.assets.newImage('myImage','grey',150,20,150,150,0.5); // myImage will be scaled down to 50% (0.5)



SETTERS
$.assets.imagePosition(image,x,y)
image = image name ,
(x,y) = position on the canvas 
eg = $.assets.imagePosition("myImage",50,150);



$.assets.imageSize(image,widht,height)
image  = image name 
(widht,height) = size of the image ( if you want to do some skewed effects )
eg = $.assets.imagePosition("myImage",150,2);



$.assets.imageScale(image,scale)
image = image name
scale = scaling the image . 1 is 100% of the former size . 0.5 is 50% of the former size . 1.5 is 150% of the former size . 



2.2.1.2 OBJECT
all the image assets created will be saved as an object in  :
$.asset.draw

eg for one object : 
Object "myImage" { texture: <img src="/.." />, x: 10, y: 10, width: 20, height: 70, type: "image" }



a draw priority system is traced too in  :
$.asset.draw.order
$.asset.draw.order[0] is first drawed  , ...order[n] is last drawed .


3. TODO :
more type of elements . 
rectangle, circle , lines , primitives . 

later on : 

to implement, already done : collision detection , ( mouse over objects, object over objects ) . 
implement drawing logic : non interactive elements, background , middle, foreground elements .... 
how to access the loop to enter the object logics . 
